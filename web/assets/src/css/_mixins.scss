@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin mediaQuery($media) {
  @if $media == small-tablet-and-up {
    @media only screen and (min-width: $screen-xs-min) {
      @content;
    }
  }

  @else if $media == tablet-and-up {
    @media only screen and (min-width: $screen-sm-min), print {
      @content;
    }
  }

  @else if $media == desktop-and-up {
    @media only screen and (min-width: $screen-md-min), print {
      @content;
    }
  }

  @else if $media == large-desktop-and-up {
    @media only screen and (min-width: $screen-lg-min) {
      @content;
    }
  }
}

@mixin flexContainer($gridGap, $wrap: false) {
  display: flex;
  margin-left: -($gridGap / 2) + px;
  margin-right: -($gridGap / 2) + px;

  @if $wrap {
    flex-wrap: wrap;
  }

  @supports (display: grid) {
    margin-left: 0;
    margin-right: 0;
  }
}

@mixin flexItem($gridGap, $width) {
  margin: 0 ($gridGap / 2) + px;
  flex: 1 1 $width;
  max-width: calc(#{$width} - #{$gridGap + px});

  @supports (display: grid) {
    margin: 0;
    flex: none;
    max-width: none;
  }
}